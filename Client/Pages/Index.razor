@page "/"
@using BindingData_SQL_EF.Shared.Models
@using BindingData_SQL_EF.Shared.Services
@using System.Text.Json

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ClientServices clientlibrary

<RadzenCard>
    <RadzenText Text="@message"></RadzenText>
</RadzenCard>

<RadzenMenu class="rz-mb-5">
	<RadzenMenuItem Text="Add" Icon="add" Click="@(args => OnAdd(Book_Model))" />
	<RadzenMenuItem Text="delete" Icon="delete" Click="OnDelete" />
	<RadzenNumeric @bind-Value="Id" class="w-25" />
</RadzenMenu>

<RadzenCard class="rz-mb-5">
	<RadzenRow >
		<RadzenColumn Size="12" SizeMD="6" SizeLG="4">
			<RadzenLabel Text="Name" TextStyle="TextStyle.Subtitle2" />
			<RadzenTextBox @bind-Value="Book_Model.Name" class="w-100" />
		</RadzenColumn>
		<RadzenColumn Size="12" SizeMD="6" SizeLG="4">
			<RadzenLabel Text="Author" TextStyle="TextStyle.Subtitle2" />
			<RadzenTextBox @bind-Value="Book_Model.Author" class="w-100" />
		</RadzenColumn>
		<RadzenColumn Size="12" SizeMD="6" SizeLG="4">
			<RadzenLabel Text="Quantity" TextStyle="TextStyle.Subtitle2" />
			<RadzenNumeric @bind-Value="Book_Model.Quantity" class="w-100" />
		</RadzenColumn>
		<RadzenColumn Size="12" SizeMD="6" SizeLG="4">
			<RadzenLabel Text="Price" TextStyle="TextStyle.Subtitle2" />
			<RadzenNumeric @bind-Value="Book_Model.Price" class="w-100" />
		</RadzenColumn>
		<RadzenColumn Size="12" SizeMD="6" SizeLG="4">
			<RadzenLabel Text="Available" TextStyle="TextStyle.Subtitle2" />
			<RadzenSwitch @bind-Value="@value"
						  class="rz-mt-1"
						  Change=@(args => OnChange(args, "Switch")) />
		</RadzenColumn>
	</RadzenRow>
</RadzenCard>










<RadzenButton Click="@(args => Settings = null)" Text="Clear saved settings" Style="margin-bottom: 16px" />
<RadzenButton Click="@(args => NavigationManager.NavigateTo("/datagrid-save-settings-loaddata", true))" Text="Reload" Style="margin-bottom: 16px" />
<RadzenDataGrid @ref=grid 
                @bind-Settings="@Settings" 
                LoadSettings="@LoadSettings" 
                AllowFiltering="true" 
                AllowColumnPicking="true" 
                AllowGrouping="true" 
                AllowPaging="true" 
                AllowSorting="true" 
                AllowMultiColumnSorting="true" 
                ShowMultiColumnSortingIndex="true"
                AllowColumnResize="true" 
                AllowColumnReorder="true" 
                ColumnWidth="200px"
                FilterPopupRenderMode="PopupRenderMode.OnDemand" 
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                Data="@LibraryBooks"
                IsLoading=@isLoading 
                Count="@count" 
                LoadData=@LoadData 
                TItem="Book"
                PageSize="@pageSize" 
                PageSizeOptions="@pageSizeOptions" 
                ShowPagingSummary="true" 
                PageSizeChanged="@(args => pageSize = args)">
    <Columns>
        <RadzenDataGridColumn TItem="Book" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Book" Property="Name" Title="Name" Frozen="true" Width="160px" />
        <RadzenDataGridColumn TItem="Book" Property="Author" Title="Author" Width="160px" />
        <RadzenDataGridColumn TItem="Book" Property="Quantity" Title="Quantity" Width="200px" />
        <RadzenDataGridColumn TItem="Book" Property="Price" Title="Price" Width="200px" />
        <RadzenDataGridColumn TItem="Book" Property="Available" Title="Available" Width="120px" />
    </Columns>
</RadzenDataGrid>



@code {
    IEnumerable<int> pageSizeOptions = new int[] { 4, 6, 8 };
    int pageSize = 4;
    RadzenDataGrid<Book> grid;
    int count;
    bool isLoading = false;
    DataGridSettings _settings;
    public List<Book>? LibraryBooks { get; set; }
    Book Book_Model = new();
    int Id { set; get; }
    string message = "";
    bool value
    {
        get => Book_Model.Available ?? false;
        set => Book_Model.Available = value;
    }

    protected override async Task OnInitializedAsync()
    {
        LibraryBooks = await clientlibrary.GetBooks();
    }

    async Task OnAdd(Book book)
    {
        _ = await clientlibrary.InsertBook(book);
        StateHasChanged();
    }

    async Task OnDelete(MenuItemEventArgs args)
    {
        var result = await clientlibrary.RemoveBook(Id);
        message = result.ToString();
        StateHasChanged();
    }

    void OnChange(bool? value, string name)
    {

    }

    async Task LoadData(LoadDataArgs args)
    {

        isLoading = true;

        await Task.Yield();

        LibraryBooks = await clientlibrary.GetBooks();

        count = LibraryBooks.Count();

        // Simulate async data loading
        await Task.Delay(100);

        isLoading = false;
    }


    public DataGridSettings Settings
    {
        get
        {
            return _settings;
        }
        set
        {
            if (_settings != value)
            {
                _settings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {

        var result = await JSRuntime.InvokeAsync<string>("window.localStorage.getItem", "SettingsLoadData");
        if (!string.IsNullOrEmpty(result) && result != "null")
        {
            _settings = JsonSerializer.Deserialize<DataGridSettings>(result);
            if (_settings.PageSize.HasValue)
            {
                pageSize = _settings.PageSize.Value;
                await Task.Yield();
            }
        }
    }

    private async Task SaveStateAsync()
    {
        await JSRuntime.InvokeVoidAsync("window.localStorage.setItem", "SettingsLoadData", JsonSerializer.Serialize<DataGridSettings>(Settings));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadStateAsync();
        }
    }

    void LoadSettings(DataGridLoadSettingsEventArgs args)
    {
        if (Settings != null)
        {
            args.Settings = Settings;
        }
    }


}